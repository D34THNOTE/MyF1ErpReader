//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: !pkg.bt
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();

typedef struct
{
    uint32 offset : 24;
    uint32 type : 8;
} OffsetData <read=dispDataAtOffset>;

string dispOffsetData(OffsetData &data)
{
    string s;
    SPrintf(s, "(%u, %u)", data.offset, data.type);
    return s;
}

string dispDataAtOffset(OffsetData &data)
{
    string s;
    
    if (data.type == 128)
    {
        SPrintf(s, "%s", dispOffsetData(data));
    }
    else
    {
        // Get the offset to the type in vca table
        SPrintf(s, "%s", dispData(main.members[1].elements[data.type].data.offset, data.offset));
    }

    return s;
}

string dispData(uint32 offset, uint32 index)
{
    string s;

    string magic = ReadString(offset, 4);
    if (magic == "!sbi")
    {
        SPrintf(s, "%s", ReadString(offset + index + 9));
    }
    else if (magic == "!vbi")
    {
        string type = ReadString(offset + 4, 4);
        uint32 numData = ReadUInt(offset + 8);
        uint32 bytePerData = ReadUInt(offset + 12);
        uint32 dataOffset = offset + 16 + bytePerData * index;
        if (type == "ui32")
        {
            SPrintf(s, "%u", ReadUInt(dataOffset));
        }
        else if (type == "ui64")
        {
            SPrintf(s, "%u", ReadUInt64(dataOffset));
        }
        else if (type == "fp32")
        {
            SPrintf(s, "%f", ReadFloat(dataOffset));
        }
        else if (type == "bool")
        {
            SPrintf(s, "%X", ReadByte(dataOffset));
        }
        else if (type == "rgba")
        {
            SPrintf(s, "%X", ReadUInt(dataOffset));
        }
        else if (type == "woid")
        {
            SPrintf(s, "%LX%LX", ReadUInt64(dataOffset), ReadUInt64(dataOffset + 8));
        }
        else if (type == "shnm")
        {
            SPrintf(s, "%s", ReadString(dataOffset, bytePerData));
        }
        else if (type == "vec3")
        {
            SPrintf(s, "%f %f %f", ReadFloat(dataOffset), ReadFloat(dataOffset + 4), ReadFloat(dataOffset + 8));
        }
        else if (type == "mat4")
        {
            SPrintf(s, "%f %f %f %f, %f %f %f %f, %f %f %f %f, %f %f %f %f", 
ReadFloat(dataOffset), ReadFloat(dataOffset + 4), ReadFloat(dataOffset + 8), ReadFloat(dataOffset + 12), 
ReadFloat(dataOffset + 16), ReadFloat(dataOffset + 20), ReadFloat(dataOffset + 24), ReadFloat(dataOffset + 28), 
ReadFloat(dataOffset + 32), ReadFloat(dataOffset + 36), ReadFloat(dataOffset + 40), ReadFloat(dataOffset + 44), 
ReadFloat(dataOffset + 48), ReadFloat(dataOffset + 52), ReadFloat(dataOffset + 56), ReadFloat(dataOffset + 60));
        }
        else
        {
            SPrintf(s, "%s Data Type Not Implemented!", type);
        }
    }

    return s;
}

string dispIdiElement(struct PkgPair &element)
{
    return dispDataAtOffset(element.data1) + " : " + dispDataAtOffset(element.data2);
}

string dispIliElement(struct PkgValue &element)
{
    return dispDataAtOffset(element.data);
}

string dispVcaElement(struct Vca &element)
{
    if (element.children.magic == "!vbi")
    {
        return element.children.type + " " + dispDataAtOffset(element.data);
    }
    else
    {
        return element.children.magic + " " + dispDataAtOffset(element.data);
    }
}

string dispChunk(struct Chunk &chunk)
{
    if (chunk.magic == "!pkg")
    {
        return "PkgRootObject";
    }
    else if (chunk.magic == "!idi")
    {
        return "PkgObject";
    }
    else if (chunk.magic == "!ili")
    {
        return "PkgArray";
    }
    else
    {
        return chunk.magic;
    }
}

typedef struct
{
    char magic[4] <hidden=true>;

    if (magic == "!pkg")
    {
        char type[4];
        local int64 currOffset = FTell();
        OffsetData firstElement <hidden=true>;
        OffsetData vcaElement <hidden=true>;
        FSeek(firstElement.offset);
        struct Chunk members;
        FSeek(vcaElement.offset);
        struct Chunk members;
    }
    else if (magic == "!idi")
    {
        OffsetData numElements <hidden=true>;
        struct PkgPair
        {
            OffsetData data1 <hidden=true>;
            OffsetData data2 <hidden=true>;
            if (numElements.type == 1)
            {
                uint32 unknown;
            }

            local int64 currOffset = FTell();
            if (data2.type == 128)
            {
                FSeek(data2.offset);
                struct Chunk children;
            }
            FSeek(currOffset);
        } members[numElements.offset] <optimize=false, read=dispIdiElement>;
    }
    else if (magic == "!ili")
    {
        uint32 numElements <hidden=true>;
        struct PkgValue
        {
            OffsetData data <hidden=true>;

            local int64 currOffset = FTell();
            if (data.type == 128)
            {
                FSeek(data.offset);
                struct Chunk children;
            }
            FSeek(currOffset);
        } elements[numElements] <optimize=false, read=dispIliElement>;
    }
    else if (magic == "!iar")
    {
        uint64 iarUnk;
    }
    else if (magic == "!vca")
    {
        uint32 numElements <hidden=true>;
        struct Vca
        {
            OffsetData data <hidden=true>;

            local int64 currOffset = FTell();
            if (data.type == 128)
            {
                FSeek(data.offset);
                struct Chunk children;
            }
            FSeek(currOffset);
        } elements[numElements] <optimize=false, read=dispVcaElement>;
    }
    else if (magic == "!sbi")
    {
        uint32 sbiLength;
        byte strData[sbiLength];
        byte padding[-FTell() & 3];
    }
    else if (magic == "!vbi")
    {
        char type[4];
        uint32 numData;
        uint32 bytePerData;
        if (type == "ui32")
        {
            uint32 data[numData];
            //byte padding[-(numData*bytePerData) & 3];
        }
        else if (type == "ui16")
        {
            uint16 data[numData];
        }
        else if (type == "si32")
        {
            int32 data[numData];
            //byte padding[-(numData*bytePerData) & 3];
        }
        else if (type == "fp32")
        {
            float data[numData];
            //byte padding[-(numData*bytePerData) & 3];
        }
        else if (type == "bool")
        {
            byte data[numData];
            //byte padding[-(numData*bytePerData) & 3];
        }
        else if (type == "rgba")
        {
            struct { ubyte rgba[4]; } data[numData];
            //byte padding[-(numData*bytePerData) & 15];
        }
        else if (type == "mat4")
        {
            struct { float mat4[16]; } data[numData];
            //byte padding[-(numData*bytePerData) & 3];
        }
        else if (type == "vec3")
        {
            struct { float x; float y; float z; float pad; } data[numData];
        }
        else if (type == "vec4")
        {
            struct { float x; float y; float z; float w; } data[numData];
        }
        else if (type == "quat")
        {
            struct { float x; float y; float z; float w; } data[numData];
        }
        else
        {
            byte data[numData*bytePerData];
            //byte padding[-(numData*bytePerData) & 3];
        }
    }
} Chunk <read=dispChunk>;

struct Chunk main;