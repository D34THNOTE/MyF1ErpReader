//--------------------------------------
//--- 010 Editor v3.1.3 Binary Template
//
// File: nfs.bt
// Author: Mike
// Purpose: Label (decoded) DiRT3 speech files (only tested on XX_codriverX_*.nfs and XX_generic.nfs)
//--------------------------------------
LittleEndian();

// This structure points to the data for a file
typedef struct {
    int data_offset; // 0 for directories
    if (data_offset != 0) {
        local int ptr = FTell();
        FSeek(data_offset);
        // Not sure about length
        // maybe just have to calculate difference between this + next data_offset?
        char magic[4];
        FSeek(ptr);
    }
    int pad; // Always 0 so far
    int flags; // Maybe? 0 for files, 0x120000 for directories, 0x100000 for last file entry
    int id1; // id1 and id2 seem to be identical so far
    int fileid; // 0 for directories, counting up from 0 for files
    int id2;
} DATAINDEX <read=readDataIndex, optimize=false>;

// This structure points out the name for a file/directory
typedef struct {
    int parentid; // Points to parent directory for hierarchy
    int id1; // Can't work out a pattern for the id#s yet
    int id2;
    int nameoffset; // Offset within the strings structure
    local int ptr = FTell();
    FSeek(header.strings_offset + nameoffset);
    string name;
    FSeek(ptr);
    int someunknownoffset; // 0 for directories
    int id3;
    int id4;
} FILEINDEX <read=readFileIndex, optimize=false>;

struct FILE {
    struct {
        char magic[4];
        int pad;
        int version; // Maybe? Equals 0x010501 for all files so far
        int pad;
        int indexcount;
        int pad;
        int pad;
        int index_offset;
        int pad;
        int strings_offset;
        int unk_offset;
        int unk_offset;
        int pad;
        int pad;
        int pad;
        char unknown[0x40];
        int pad;
    } header;

    FSeek(header.index_offset);
    DATAINDEX dataindices[header.indexcount];
    FILEINDEX fileindices[header.indexcount];
    
    // The following is just for testing so far
    FSeek(header.unk_offset[0] - 2);
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;

    FSeek(header.unk_offset[1]);
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
    int pad;
} file;

// These functions are just for displaying the struct data nicely in 010
string readDataIndex(DATAINDEX &index) {
    string ret;
    local int i;
    SPrintf(ret, "ID: %d %d // FileID: %d // ETC: %d", index.id1, index.id2, index.fileid, index.pad[0]);
    for (i = 1; exists(index.pad[i]); i++) {
        SPrintf(ret, "%s : %d", ret, index.pad[i]);
    }
    return ret;
}

string readFileIndex(FILEINDEX &index) {
    string ret;
    local int i;
    SPrintf(ret, "%s // ID: %d %d %d %d // Parent: %d", index.name, index.id1, index.id2, index.id3, index.id4, index.parentid);
    return ret;
}